// ‚úÖ ÏÜåÏºì ÏÑúÎ≤Ñ Ïó∞Í≤∞
const socket = io();

// ‚úÖ HTML ÏöîÏÜå Ï∞∏Ï°∞
const myFace = document.getElementById("myFace");
const muteBtn = document.getElementById("mute");
const cameraBtn = document.getElementById("camera");
const cameraSelect = document.getElementById("cameras");
const welcome = document.getElementById("welcome");
const call = document.getElementById("call");
call.hidden = true;

// ‚úÖ ÏÉÅÌÉú Î≥ÄÏàò
let myStream;
let muted = false;
let cameraOff = false;
let roomName;
let myPeer;
let iceQueue = [];
let isRemoteDescSet = false;

// ‚úÖ Ïπ¥Î©îÎùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
async function getCamera() {
  try {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const cameras = devices.filter((device) => device.kind === "videoinput");
    const currentCamera = myStream?.getVideoTracks()[0];
    cameras.forEach((camera) => {
      const option = document.createElement("option");
      option.value = camera.deviceId;
      option.innerText = camera.label;
      if (currentCamera && currentCamera.label === camera.label) option.selected = true;
      cameraSelect.appendChild(option);
    });
  } catch (e) {
    console.log("üì∑ Ïπ¥Î©îÎùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", e);
  }
}

// ‚úÖ Ïä§Ìä∏Î¶º ÏñªÍ∏∞
async function getMedia(deviceId) {
  const constraints = deviceId
    ? { audio: true, video: { deviceId: { exact: deviceId } } }
    : { audio: true, video: true };
  try {
    myStream = await navigator.mediaDevices.getUserMedia(constraints);
    myFace.srcObject = myStream;
    if (!deviceId) await getCamera();
    console.log("üé• ÎÇ¥ Ïä§Ìä∏Î¶º Ï§ÄÎπÑ ÏôÑÎ£å:", myStream);
  } catch (e) {
    console.error("üé• Ïπ¥Î©îÎùº+ÎßàÏù¥ÌÅ¨ Ï†ëÍ∑º Ïã§Ìå®:", e);
    try {
      myStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
      myFace.srcObject = myStream;
      console.warn("üì¢ Ïπ¥Î©îÎùº ÏóÜÏù¥ Ïò§ÎîîÏò§Îßå Ïó∞Í≤∞Îê®");
    } catch (err) {
      console.error("üéôÔ∏è Ïò§ÎîîÏò§ Ï†ëÍ∑ºÎèÑ Ïã§Ìå®:", err);
      alert("Ïπ¥Î©îÎùºÏôÄ ÎßàÏù¥ÌÅ¨ Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.");
    }
  }
}

// ‚úÖ ÏùåÏÜåÍ±∞
function handleMuteClick() {
  myStream?.getAudioTracks().forEach((track) => (track.enabled = !track.enabled));
  muteBtn.innerText = muted ? "Mute" : "Unmute";
  muted = !muted;
}

// ‚úÖ Ïπ¥Î©îÎùº ÌÜ†Í∏Ä
function handleCameraClick() {
  myStream?.getVideoTracks().forEach((track) => (track.enabled = !track.enabled));
  cameraBtn.innerText = cameraOff ? "Turn Camera Off" : "Turn Camera On";
  cameraOff = !cameraOff;
}

// ‚úÖ Ïπ¥Î©îÎùº Î≥ÄÍ≤Ω
async function handleCameraChange() {
  await getMedia(cameraSelect.value);
  const videoTrack = myStream.getVideoTracks()[0];
  const videoSender = myPeer.getSenders().find((s) => s.track.kind === "video");
  if (videoSender) videoSender.replaceTrack(videoTrack);
}

// ‚úÖ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
muteBtn.addEventListener("click", handleMuteClick);
cameraBtn.addEventListener("click", handleCameraClick);
cameraSelect.addEventListener("input", handleCameraChange);

// ‚úÖ ÏãúÏûë Ìèº
const welcomeForm = welcome.querySelector("form");

async function startMedia() {
  await getMedia();
  makeConnection();
  welcome.hidden = true;
  call.hidden = false;
}

function handleWelcomeSubmit(event) {
  event.preventDefault();
  const input = welcome.querySelector("input");
  roomName = input.value;
  socket.emit("join_room", roomName, startMedia);
  input.value = "";
}

welcomeForm.addEventListener("submit", handleWelcomeSubmit);

// ‚úÖ RTCPeerConnection Ïó∞Í≤∞
function makeConnection() {
  if (!myStream) {
    console.error("‚ùó Ïä§Ìä∏Î¶ºÏù¥ ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä getMedia() Ïã§Ìñâ ÌïÑÏöî");
    return;
  }

  myPeer = new RTCPeerConnection({
    iceServers: [{ urls: ["stun:stun.l.google.com:19302"] }]
  });

  myPeer.addEventListener("icecandidate", (data) => {
    if (data.candidate) {
      socket.emit("ice", data.candidate, roomName);
    }
  });

  myPeer.addEventListener("connectionstatechange", () => {
    console.log("üì∂ Peer Ïó∞Í≤∞ ÏÉÅÌÉú:", myPeer.connectionState);
  });

  myPeer.addEventListener("track", (event) => {
    console.log("‚úÖ ÏÉÅÎåÄÎ∞© Ìä∏Îûô ÏàòÏã†Îê®:", event.streams);
    const peerVideo = document.getElementById("peerFace");
    if (peerVideo) {
      peerVideo.srcObject = event.streams[0];
      console.log("üì∫ peerFaceÏóê Ïä§Ìä∏Î¶º Ïó∞Í≤∞Îê®");
    }
  });

  myStream.getTracks().forEach((track) => {
    console.log("üì° addTrack:", track.kind);
    myPeer.addTrack(track, myStream);
  });
}

// ‚úÖ offer ÏÉùÏÑ± (ÌõÑÏûÖÏû•Ïûê)
socket.on("welcome", async () => {
  console.log("üì° welcome ÏàòÏã† ‚Üí offer ÏÉùÏÑ± ÏãúÏûë");
  const offer = await myPeer.createOffer();
  await myPeer.setLocalDescription(offer);
  socket.emit("offer", offer, roomName);
});

// ‚úÖ offer ÏàòÏã† ‚Üí answer ÏùëÎãµ
socket.on("offer", async (offer) => {
  console.log("üì° offer ÏàòÏã†Îê®");
  if (!myStream) await getMedia();
  if (!myPeer) makeConnection();

  await myPeer.setRemoteDescription(offer);
  isRemoteDescSet = true;

  const answer = await myPeer.createAnswer();
  await myPeer.setLocalDescription(answer);
  socket.emit("answer", answer, roomName);

  for (const ice of iceQueue) {
    try {
      await myPeer.addIceCandidate(ice);
    } catch (e) {
      console.error("‚ùó ICE ÌÅê Ï∂îÍ∞Ä Ï§ë Ïò§Î•ò:", e);
    }
  }
  iceQueue = [];
});

// ‚úÖ answer ÏàòÏã†
socket.on("answer", async (answer) => {
  console.log("üì° answer ÏàòÏã†Îê®");
  try {
    await myPeer.setRemoteDescription(answer);
    isRemoteDescSet = true;

    for (const ice of iceQueue) {
      try {
        await myPeer.addIceCandidate(ice);
      } catch (e) {
        console.error("‚ùó ICE ÌÅê Ï∂îÍ∞Ä Ï§ë Ïò§Î•ò:", e);
      }
    }
    iceQueue = [];
  } catch (err) {
    console.warn("‚ö†Ô∏è answer Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:", err);
  }
});

// ‚úÖ ICE ÏàòÏã†
socket.on("ice", async (ice) => {
  if (myPeer && isRemoteDescSet) {
    try {
      await myPeer.addIceCandidate(ice);
    } catch (e) {
      console.error("‚ùó ICE Ï∂îÍ∞Ä Ï§ë Ïò§Î•ò:", e);
    }
  } else {
    iceQueue.push(ice);
  }
});